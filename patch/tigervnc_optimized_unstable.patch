diff --git a/common/os/Thread.cxx b/common/os/Thread.cxx
index 2b08dbf9..09687a85 100644
--- a/common/os/Thread.cxx
+++ b/common/os/Thread.cxx
@@ -19,6 +19,7 @@
 #ifdef WIN32
 #include <windows.h>
 #else
+#include <stdlib.h>
 #include <pthread.h>
 #include <signal.h>
 #include <unistd.h>
@@ -48,7 +49,7 @@ Thread::~Thread()
   delete (HANDLE*)threadId;
 #else
   if (isRunning())
-    pthread_cancel(*(pthread_t*)threadId);
+    abort();
   delete (pthread_t*)threadId;
 #endif
 
diff --git a/common/rfb/JpegDecompressor.cxx b/common/rfb/JpegDecompressor.cxx
index 4f94faa8..bd96fca3 100644
--- a/common/rfb/JpegDecompressor.cxx
+++ b/common/rfb/JpegDecompressor.cxx
@@ -24,13 +24,6 @@
 #include <rfb/Rect.h>
 #include <rfb/PixelFormat.h>
 
-#include <stdio.h>
-extern "C" {
-#include <jpeglib.h>
-}
-#include <jerror.h>
-#include <setjmp.h>
-
 using namespace rfb;
 
 //
@@ -46,14 +39,7 @@ static const PixelFormat pfXBGR(32, 24, false, true, 255, 255, 255, 24, 16, 8);
 // Error manager implementation for the JPEG library
 //
 
-struct JPEG_ERROR_MGR {
-  struct jpeg_error_mgr pub;
-  jmp_buf jmpBuffer;
-  char lastError[JMSG_LENGTH_MAX];
-};
-
-static void
-JpegErrorExit(j_common_ptr dinfo)
+void JpegDecompressor::JpegErrorExit(j_common_ptr dinfo)
 {
   JPEG_ERROR_MGR *err = (JPEG_ERROR_MGR *)dinfo->err;
 
@@ -61,8 +47,7 @@ JpegErrorExit(j_common_ptr dinfo)
   longjmp(err->jmpBuffer, 1);
 }
 
-static void
-JpegOutputMessage(j_common_ptr dinfo)
+void JpegDecompressor::JpegOutputMessage(j_common_ptr dinfo)
 {
   JPEG_ERROR_MGR *err = (JPEG_ERROR_MGR *)dinfo->err;
 
@@ -74,25 +59,17 @@ JpegOutputMessage(j_common_ptr dinfo)
 // Source manager implementation for the JPEG library.
 //
 
-struct JPEG_SRC_MGR {
-  struct jpeg_source_mgr pub;
-  JpegDecompressor *instance;
-};
-
-static void
-JpegNoOp(j_decompress_ptr dinfo)
+void JpegDecompressor::JpegNoOp(j_decompress_ptr dinfo)
 {
 }
 
-static boolean
-JpegFillInputBuffer(j_decompress_ptr dinfo)
+boolean JpegDecompressor::JpegFillInputBuffer(j_decompress_ptr dinfo)
 {
   ERREXIT(dinfo, JERR_BUFFER_SIZE);
   return TRUE;
 }
 
-static void
-JpegSkipInputData(j_decompress_ptr dinfo, long num_bytes)
+void JpegDecompressor::JpegSkipInputData(j_decompress_ptr dinfo, long num_bytes)
 {
   JPEG_SRC_MGR *src = (JPEG_SRC_MGR *)dinfo->src;
 
@@ -106,44 +83,35 @@ JpegSkipInputData(j_decompress_ptr dinfo, long num_bytes)
 
 JpegDecompressor::JpegDecompressor(void)
 {
-  dinfo = new jpeg_decompress_struct;
+  dinfo.err = jpeg_std_error(&err.pub);
+  snprintf(err.lastError, JMSG_LENGTH_MAX, "No error");
+  err.pub.error_exit = JpegErrorExit;
+  err.pub.output_message = JpegOutputMessage;
 
-  err = new struct JPEG_ERROR_MGR;
-  dinfo->err = jpeg_std_error(&err->pub);
-  snprintf(err->lastError, JMSG_LENGTH_MAX, "No error");
-  err->pub.error_exit = JpegErrorExit;
-  err->pub.output_message = JpegOutputMessage;
-
-  if(setjmp(err->jmpBuffer)) {
+  if(setjmp(err.jmpBuffer)) {
     // this will execute if libjpeg has an error
-    throw rdr::Exception("%s", err->lastError);
+    throw rdr::Exception("%s", err.lastError);
   }
 
-  jpeg_create_decompress(dinfo);
+  jpeg_create_decompress(&dinfo);
 
-  src = new struct JPEG_SRC_MGR;
-  src->pub.init_source = JpegNoOp;
-  src->pub.fill_input_buffer = JpegFillInputBuffer;
-  src->pub.skip_input_data = JpegSkipInputData;
-  src->pub.resync_to_restart = jpeg_resync_to_restart;
-  src->pub.term_source = JpegNoOp;
-  src->instance = this;
-  dinfo->src = (struct jpeg_source_mgr *)src;
+  src.pub.init_source = JpegNoOp;
+  src.pub.fill_input_buffer = JpegFillInputBuffer;
+  src.pub.skip_input_data = JpegSkipInputData;
+  src.pub.resync_to_restart = jpeg_resync_to_restart;
+  src.pub.term_source = JpegNoOp;
+  src.instance = this;
+  dinfo.src = (struct jpeg_source_mgr *)&src;
 }
 
 JpegDecompressor::~JpegDecompressor(void)
 {
-  if(setjmp(err->jmpBuffer)) {
+  if(setjmp(err.jmpBuffer)) {
     // this will execute if libjpeg has an error
     return;
   }
 
-  jpeg_destroy_decompress(dinfo);
-
-  delete err;
-  delete src;
-
-  delete dinfo;
+  jpeg_destroy_decompress(&dinfo);
 }
 
 void JpegDecompressor::decompress(const rdr::U8 *jpegBuf, int jpegBufLen,
@@ -157,19 +125,19 @@ void JpegDecompressor::decompress(const rdr::U8 *jpegBuf, int jpegBufLen,
   bool dstBufIsTemp = false;
   JSAMPROW *rowPointer = NULL;
 
-  if(setjmp(err->jmpBuffer)) {
+  if(setjmp(err.jmpBuffer)) {
     // this will execute if libjpeg has an error
-    jpeg_abort_decompress(dinfo);
+    jpeg_abort_decompress(&dinfo);
     if (dstBufIsTemp && dstBuf) delete[] dstBuf;
     if (rowPointer) delete[] rowPointer;
-    throw rdr::Exception("%s", err->lastError);
+    throw rdr::Exception("%s", err.lastError);
   }
 
-  src->pub.next_input_byte = jpegBuf;
-  src->pub.bytes_in_buffer = jpegBufLen;
+  src.pub.next_input_byte = jpegBuf;
+  src.pub.bytes_in_buffer = jpegBufLen;
 
-  jpeg_read_header(dinfo, TRUE);
-  dinfo->out_color_space = JCS_RGB;
+  jpeg_read_header(&dinfo, TRUE);
+  dinfo.out_color_space = JCS_RGB;
   pixelsize = 3;
   if (stride == 0)
     stride = w;
@@ -179,21 +147,21 @@ void JpegDecompressor::decompress(const rdr::U8 *jpegBuf, int jpegBufLen,
   // Try to have libjpeg output directly to our native format
   // libjpeg can only handle some "standard" formats
   if (pfRGBX.equal(pf))
-    dinfo->out_color_space = JCS_EXT_RGBX;
+    dinfo.out_color_space = JCS_EXT_RGBX;
   else if (pfBGRX.equal(pf))
-    dinfo->out_color_space = JCS_EXT_BGRX;
+    dinfo.out_color_space = JCS_EXT_BGRX;
   else if (pfXRGB.equal(pf))
-    dinfo->out_color_space = JCS_EXT_XRGB;
+    dinfo.out_color_space = JCS_EXT_XRGB;
   else if (pfXBGR.equal(pf))
-    dinfo->out_color_space = JCS_EXT_XBGR;
+    dinfo.out_color_space = JCS_EXT_XBGR;
 
-  if (dinfo->out_color_space != JCS_RGB) {
+  if (dinfo.out_color_space != JCS_RGB) {
     dstBuf = (rdr::U8 *)buf;
     pixelsize = 4;
   }
 #endif
 
-  if (dinfo->out_color_space == JCS_RGB) {
+  if (dinfo.out_color_space == JCS_RGB) {
     dstBuf = new rdr::U8[w * h * pixelsize];
     dstBufIsTemp = true;
     dstBufStride = w;
@@ -203,26 +171,26 @@ void JpegDecompressor::decompress(const rdr::U8 *jpegBuf, int jpegBufLen,
   for (int dy = 0; dy < h; dy++)
     rowPointer[dy] = (JSAMPROW)(&dstBuf[dy * dstBufStride * pixelsize]);
 
-  jpeg_start_decompress(dinfo);
+  jpeg_start_decompress(&dinfo);
 
-  if (dinfo->output_width != (unsigned)r.width()
-    || dinfo->output_height != (unsigned)r.height()
-    || dinfo->output_components != pixelsize) {
-    jpeg_abort_decompress(dinfo);
+  if (dinfo.output_width != (unsigned)r.width()
+    || dinfo.output_height != (unsigned)r.height()
+    || dinfo.output_components != pixelsize) {
+    jpeg_abort_decompress(&dinfo);
     if (dstBufIsTemp && dstBuf) delete[] dstBuf;
     if (rowPointer) delete[] rowPointer;
     throw rdr::Exception("Tight Decoding: Wrong JPEG data received.\n");
   }
 
-  while (dinfo->output_scanline < dinfo->output_height) {
-    jpeg_read_scanlines(dinfo, &rowPointer[dinfo->output_scanline],
-			dinfo->output_height - dinfo->output_scanline);
+  while (dinfo.output_scanline < dinfo.output_height) {
+    jpeg_read_scanlines(&dinfo, &rowPointer[dinfo.output_scanline],
+			dinfo.output_height - dinfo.output_scanline);
   }
 
-  if (dinfo->out_color_space == JCS_RGB)
+  if (dinfo.out_color_space == JCS_RGB)
     pf.bufferFromRGB((rdr::U8*)buf, dstBuf, w, stride, h);
 
-  jpeg_finish_decompress(dinfo);
+  jpeg_finish_decompress(&dinfo);
 
   if (dstBufIsTemp) delete [] dstBuf;
   delete[] rowPointer;
diff --git a/common/rfb/JpegDecompressor.h b/common/rfb/JpegDecompressor.h
index ed367786..3acfaab0 100644
--- a/common/rfb/JpegDecompressor.h
+++ b/common/rfb/JpegDecompressor.h
@@ -28,11 +28,12 @@
 
 #include <rfb/PixelFormat.h>
 #include <rfb/Rect.h>
-
-struct jpeg_decompress_struct;
-
-struct JPEG_ERROR_MGR;
-struct JPEG_SRC_MGR;
+#include <setjmp.h>
+#include <stdio.h>
+extern "C" {
+#include <jpeglib.h>
+}
+#include <jerror.h>
 
 namespace rfb {
 
@@ -47,12 +48,26 @@ namespace rfb {
                     const PixelFormat&);
 
   private:
-
-    struct jpeg_decompress_struct *dinfo;
-
-    struct JPEG_ERROR_MGR *err;
-    struct JPEG_SRC_MGR *src;
-
+    struct JPEG_ERROR_MGR {
+      jpeg_error_mgr pub;
+      jmp_buf jmpBuffer;
+      char lastError[JMSG_LENGTH_MAX];
+    };
+
+    struct JPEG_SRC_MGR {
+      jpeg_source_mgr pub;
+      JpegDecompressor *instance;
+    };
+
+    static void JpegErrorExit(j_common_ptr);
+    static void JpegOutputMessage(j_common_ptr);
+    static void JpegNoOp(j_decompress_ptr);
+    static boolean JpegFillInputBuffer(j_decompress_ptr);
+    static void JpegSkipInputData(j_decompress_ptr, long);
+
+    jpeg_decompress_struct dinfo;
+    JPEG_ERROR_MGR err;
+    JPEG_SRC_MGR src;
   };
 
 } // end of namespace rfb
diff --git a/common/rfb/PixelFormat.h b/common/rfb/PixelFormat.h
index 5b4b6332..2944cdee 100644
--- a/common/rfb/PixelFormat.h
+++ b/common/rfb/PixelFormat.h
@@ -64,6 +64,8 @@ namespace rfb {
     inline Pixel pixelFromRGB(rdr::U16 red, rdr::U16 green, rdr::U16 blue) const;
     inline Pixel pixelFromRGB(rdr::U8 red, rdr::U8 green, rdr::U8 blue) const;
 
+    inline void bufferFromRGB(rdr::U8 *dst, const rdr::U8* src) const;
+    inline void bufferFromRGB(rdr::U32 *dst, const rdr::U8* src) const;
     void bufferFromRGB(rdr::U8 *dst, const rdr::U8* src, int pixels) const;
     void bufferFromRGB(rdr::U8 *dst, const rdr::U8* src,
                        int w, int stride, int h) const;
diff --git a/common/rfb/PixelFormat.inl b/common/rfb/PixelFormat.inl
index 5a40379a..c9de81ed 100644
--- a/common/rfb/PixelFormat.inl
+++ b/common/rfb/PixelFormat.inl
@@ -130,6 +130,23 @@ inline void PixelFormat::rgbFromPixel(Pixel p, rdr::U8 *r, rdr::U8 *g, rdr::U8 *
   *b = upconvTable[(blueBits-1)*256 + _b];
 }
 
+inline void PixelFormat::bufferFromRGB(rdr::U8 *dst, const rdr::U8* src) const
+{
+  rdr::U8 r = *src++;
+  rdr::U8 g = *src++;
+  rdr::U8 b = *src++;
+  Pixel p = pixelFromRGB(r, g, b);
+  bufferFromPixel(dst, p);
+}
+
+inline void PixelFormat::bufferFromRGB(rdr::U32 *dst, const rdr::U8* src) const
+{
+  rdr::U32 r = *src++;
+  rdr::U32 g = *src++;
+  rdr::U32 b = *src++;
+  *dst = (r << redShift) | (g << greenShift) | (b << blueShift);
+}
+
 
 }
 
diff --git a/common/rfb/TightDecoder.cxx b/common/rfb/TightDecoder.cxx
index cc786f5b..285836d8 100644
--- a/common/rfb/TightDecoder.cxx
+++ b/common/rfb/TightDecoder.cxx
@@ -200,6 +200,7 @@ void TightDecoder::decodeRect(const Rect& r, const void* buffer,
     }
     comp_ctl >>= 1;
   }
+  int streamId = comp_ctl & 0x03;
 
   // "Fill" compression type.
   if (comp_ctl == tightFill) {
@@ -299,9 +300,6 @@ void TightDecoder::decodeRect(const Rect& r, const void* buffer,
 
   // Determine if the data should be decompressed or just copied.
   size_t rowSize, dataSize;
-  rdr::U8* netbuf;
-
-  netbuf = NULL;
 
   if (palSize != 0) {
     if (palSize <= 2)
@@ -320,8 +318,6 @@ void TightDecoder::decodeRect(const Rect& r, const void* buffer,
     assert(buflen >= dataSize);
   else {
     rdr::U32 len;
-    int streamId;
-    rdr::MemInStream* ms;
 
     assert(buflen >= 4);
 
@@ -331,26 +327,24 @@ void TightDecoder::decodeRect(const Rect& r, const void* buffer,
 
     assert(buflen >= len);
 
-    streamId = comp_ctl & 0x03;
-    ms = new rdr::MemInStream(bufptr, len);
-    zis[streamId].setUnderlying(ms, len);
+    rdr::MemInStream ms(bufptr, len);
+    zis[streamId].setUnderlying(&ms, len);
 
     // Allocate buffer and decompress the data
-    netbuf = new rdr::U8[dataSize];
+    netbuf[streamId].resize(dataSize);
 
-    zis[streamId].readBytes(netbuf, dataSize);
+    zis[streamId].readBytes(netbuf[streamId].data(), dataSize);
 
     zis[streamId].removeUnderlying();
-    delete ms;
 
-    bufptr = netbuf;
+    bufptr = netbuf[streamId].data();
     buflen = dataSize;
   }
 
   // Time to decode the actual data
   bool directDecode;
 
-  rdr::U8* outbuf;
+  rdr::U8* outptr;
   int stride;
 
   if (pb->getPF().equal(pf)) {
@@ -362,9 +356,10 @@ void TightDecoder::decodeRect(const Rect& r, const void* buffer,
   }
 
   if (directDecode)
-    outbuf = pb->getBufferRW(r, &stride);
+    outptr = pb->getBufferRW(r, &stride);
   else {
-    outbuf = new rdr::U8[r.area() * (pf.bpp/8)];
+    outbuf[streamId].resize(r.area() * (pf.bpp/8));
+    outptr = outbuf[streamId].data();
     stride = r.width();
   }
 
@@ -372,23 +367,23 @@ void TightDecoder::decodeRect(const Rect& r, const void* buffer,
     // Truecolor data
     if (useGradient) {
       if (pf.is888())
-        FilterGradient24(bufptr, pf, (rdr::U32*)outbuf, stride, r);
+        FilterGradient24(bufptr, pf, (rdr::U32*)outptr, stride, r);
       else {
         switch (pf.bpp) {
         case 8:
           assert(false);
           break;
         case 16:
-          FilterGradient(bufptr, pf, (rdr::U16*)outbuf, stride, r);
+          FilterGradient(bufptr, pf, (rdr::U16*)outptr, stride, r);
           break;
         case 32:
-          FilterGradient(bufptr, pf, (rdr::U32*)outbuf, stride, r);
+          FilterGradient(bufptr, pf, (rdr::U32*)outptr, stride, r);
           break;
         }
       }
     } else {
       // Copy
-      rdr::U8* ptr = outbuf;
+      rdr::U8* ptr = outptr;
       const rdr::U8* srcPtr = bufptr;
       int w = r.width();
       int h = r.height();
@@ -413,15 +408,15 @@ void TightDecoder::decodeRect(const Rect& r, const void* buffer,
     switch (pf.bpp) {
     case 8:
       FilterPalette((const rdr::U8*)palette, palSize,
-                    bufptr, (rdr::U8*)outbuf, stride, r);
+                    bufptr, (rdr::U8*)outptr, stride, r);
       break;
     case 16:
       FilterPalette((const rdr::U16*)palette, palSize,
-                    bufptr, (rdr::U16*)outbuf, stride, r);
+                    bufptr, (rdr::U16*)outptr, stride, r);
       break;
     case 32:
       FilterPalette((const rdr::U32*)palette, palSize,
-                    bufptr, (rdr::U32*)outbuf, stride, r);
+                    bufptr, (rdr::U32*)outptr, stride, r);
       break;
     }
   }
@@ -429,11 +424,8 @@ void TightDecoder::decodeRect(const Rect& r, const void* buffer,
   if (directDecode)
     pb->commitBufferRW(r);
   else {
-    pb->imageRect(pf, r, outbuf);
-    delete [] outbuf;
+    pb->imageRect(pf, r, outptr);
   }
-
-  delete [] netbuf;
 }
 
 rdr::U32 TightDecoder::readCompact(rdr::InStream* is)
diff --git a/common/rfb/TightDecoder.h b/common/rfb/TightDecoder.h
index 6eb93d2a..53b57a90 100644
--- a/common/rfb/TightDecoder.h
+++ b/common/rfb/TightDecoder.h
@@ -20,6 +20,7 @@
 #ifndef __RFB_TIGHTDECODER_H__
 #define __RFB_TIGHTDECODER_H__
 
+#include <vector>
 #include <rdr/ZlibInStream.h>
 #include <rfb/Decoder.h>
 #include <rfb/JpegDecompressor.h>
@@ -67,6 +68,8 @@ namespace rfb {
 
   private:
     rdr::ZlibInStream zis[4];
+    std::vector<rdr::U8> netbuf[4];
+    std::vector<rdr::U8> outbuf[4];
   };
 }
 
diff --git a/common/rfb/tightDecode.h b/common/rfb/tightDecode.h
index b6e86ed5..56a56c34 100644
--- a/common/rfb/tightDecode.h
+++ b/common/rfb/tightDecode.h
@@ -61,7 +61,7 @@ TightDecoder::FilterGradient24(const rdr::U8 *inbuf,
       pix[c] = inbuf[y*rectWidth*3+c] + prevRow[c];
       thisRow[c] = pix[c];
     }
-    pf.bufferFromRGB((rdr::U8*)&outbuf[y*stride], pix, 1);
+    pf.bufferFromRGB(&outbuf[y*stride], pix);
 
     /* Remaining pixels of a row */
     for (x = 1; x < rectWidth; x++) {
@@ -75,7 +75,7 @@ TightDecoder::FilterGradient24(const rdr::U8 *inbuf,
         pix[c] = inbuf[(y*rectWidth+x)*3+c] + est[c];
         thisRow[x*3+c] = pix[c];
       }
-      pf.bufferFromRGB((rdr::U8*)&outbuf[y*stride+x], pix, 1);
+      pf.bufferFromRGB(&outbuf[y*stride+x], pix);
     }
 
     memcpy(prevRow, thisRow, sizeof(prevRow));
@@ -110,7 +110,7 @@ void TightDecoder::FilterGradient(const rdr::U8* inbuf,
 
     memcpy(thisRow, pix, sizeof(pix));
 
-    pf.bufferFromRGB((rdr::U8*)&outbuf[y*stride], pix, 1);
+    pf.bufferFromRGB((rdr::U8*)&outbuf[y*stride], pix);
 
     /* Remaining pixels of a row */
     for (x = 1; x < rectWidth; x++) {
@@ -129,7 +129,7 @@ void TightDecoder::FilterGradient(const rdr::U8* inbuf,
 
       memcpy(&thisRow[x*3], pix, sizeof(pix));
 
-      pf.bufferFromRGB((rdr::U8*)&outbuf[y*stride+x], pix, 1);
+      pf.bufferFromRGB((rdr::U8*)&outbuf[y*stride+x], pix);
     }
 
     memcpy(prevRow, thisRow, sizeof(prevRow));
